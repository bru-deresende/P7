from pickle import load
import streamlit as st
import pandas as pd
from PIL import Image
from matplotlib import pyplot as plt
import seaborn as sns
from urllib.error import URLError
import plotly.graph_objects as go
import shap
from streamlit_shap import st_shap
import requests

host = "https://api-scoring.onrender.com"
# host = "https://api-scoring-app.herokuapp.com"

# --------------------------------------------------------------------------------
# --------------------- Configuration de la page ---------------------------------
# --------------------------------------------------------------------------------

st.set_page_config(page_title="Scoring_Client", page_icon="‚úÖ", layout="wide", )

# --------------------------------------------------------------------------------
# ------------------------ Configuration texte -----------------------------------
# --------------------------------------------------------------------------------

st.markdown("""
                <style>
                .text-font {
                    font-size:20px;
                    text-align: justify;
                }
                </style>
                """, unsafe_allow_html=True)

st.markdown("""
                <style>
                .text-font_red {
                    color:#ff0000;
                    font-size:20px;
                    text-align: justify;
                }
                </style>
                """, unsafe_allow_html=True)

st.markdown("""
                <style>
                .text-font_green {
                    color:#116813;
                    font-size:20px;
                    text-align: justify;
                }
                </style>
                """, unsafe_allow_html=True)

st.markdown("""
                <style>
                .text-font_title {
                    font-size:30px;
                    text-align:center
                }
                </style>
                """, unsafe_allow_html=True)

# --------------------------------------------------------------------------------
# ------------------------- Titre de la page -------------------------------------
# --------------------------------------------------------------------------------

st.markdown("# Scoring client")


# --------------------------------------------------------------------------------
# ---------------------- Afficher  la d√©finition ---------------------------------
# --------------------------------------------------------------------------------

@st.cache_data
def upload_glossary():
    """Fonction qui appelle l'API et retourne la d√©finition des variables au format
    dataframe.

    Arguments:
    --------------------------------

    return:
    --------------------------------
    res:dataframe: Lexique"""

    res = requests.get(host + f"/get_glossary/")
    res = res.json()
    res = pd.read_json(res, orient='index')
    return res


checkbox_scoring = st.sidebar.checkbox("Afficher la d√©finition")
if checkbox_scoring:
    st.divider()
    st.markdown("<p class='text-font'>Outil de scoring cr√©dit pour calculer la <strong>probabilit√©</strong> de faillite"
                " du client et classifier sa demande de pr√™t en <strong>cr√©dit <span "
                "class='text-font_green'>accord√©</span> ou <span class='text-font_red'>refus√©</span></strong>.<br>"
                "Divers graphiques viennent aider √† la compr√©hension du score en montrant comment les "
                "caract√©ristiques du client contribuent √† la pr√©diction finale."
                "<br><br>"
                "<strong>Liste des caract√©ristiques:</strong></p></p>",
                unsafe_allow_html=True)
    glossary = upload_glossary()
    st.dataframe(glossary, use_container_width=True)

# --------------------------------------------------------------------------------
# -------------------------------- Logo ------------------------------------------
# --------------------------------------------------------------------------------

#logo = Image.open('Logo.jpg')
#st.sidebar.image(logo, width=200)


# --------------------------------------------------------------------------------
# ---------------- Chargement des donn√©es et s√©lection ID-------------------------
# --------------------------------------------------------------------------------


# Df en cache pour n'√™tre charg√© qu'une fois
@st.cache_data
def get_data():
    """Fonction qui appelle l'API et retourne la liste des demandes de
    pr√™ts au format dataframe.

    Arguments:
    --------------------------------

    return:
    --------------------------------
    df:dataframe: tableau des demandes de pr√™ts"""

    res = requests.get(host + f"/get_loans/")
    response = res.json()
    df = pd.read_json(response, orient='index')
    df['SK_ID_CURR'] = df['SK_ID_CURR'].astype(str)
    df = df.drop(['TARGET'], axis=1)
    return df


try:
    st.divider()
    # Chargement des donn√©es avec features ayant servi √† la mod√©lisation
    df = get_data()

    # S√©lection de l'ID du pr√™t
    loan_ID = st.text_input("üÜî Renseigner l'ID du pr√™t", '', key="select_id", max_chars=6)

    if not loan_ID:
        st.error("Merci de rentrer un ID")

    # --------------------------------------------------------------------------------
    # ---------------- Filtre sur ID et affichage du dataframe------------------------
    # --------------------------------------------------------------------------------

    else:

        # Filtre sur l'ID du pr√™t
        ID_row = df[df['SK_ID_CURR'] == loan_ID]
        ID_row_index = ID_row.index
        # Affichage de la ligne
        st.divider()
        st.write("### Informations utilis√©es dans le calcul du scoring", ID_row)
        st.divider()

        # --------------------------------------------------------------------------------
        # ---------------- Calcul probabilit√© de faillite du client-----------------------
        # --------------------------------------------------------------------------------

        # Lors du click sur le bouton, appel √† l'API de pr√©diction
        if st.button('Lancer la pr√©diction'):
            # res = requests.get(url="http://127.0.0.1:8000/get_proba", data=id_client)
            res = requests.get(host + f"/get_proba/{loan_ID}")
            response = res.json()[0]

            # Index du pr√™t choisi
            idx = ID_row.index[0]

            # S√©paration page en 2 colonnes
            col1, col2 = st.columns(2)

            # --------------------------------------------------------------------------------
            # --------------------------- Jauge et explications ------------------------------
            # --------------------------------------------------------------------------------

            # Si la probabilit√© de d√©faillance est sup√©rieure au seuil de 0.47, classement d√©faillant
            if response > 0.47:
                # Jauge
                gauge = go.Figure(go.Indicator(mode="gauge+number+delta",
                                               value=float(response) * 100,
                                               domain={'x': [0, 1], 'y': [0, 1]},
                                               delta={'reference': 47, 'increasing': {'color': "red"}},
                                               gauge={'axis': {'range': [None, 100]},
                                                      'bar': {'color': "red"},
                                                      'steps': [
                                                          {'range': [0, 40], 'color': "lightgrey"},
                                                          {'range': [40, 60], 'color': "gray"},
                                                          {'range': [60, 100], 'color': "dimgray"}],
                                                      'threshold': {
                                                          'line': {'color': "red", 'width': 4},
                                                          'thickness': 0.75,
                                                          'value': 47}}))
                gauge.update_layout(font={'size': 18})

                # Affichage jauge
                col1.markdown(
                    "<p class='text-font_title'><strong>Probabilit√© de faillite du client (%)</strong></p>",
                    unsafe_allow_html=True)
                col1.plotly_chart(gauge, use_container_width=True)

                # Classement du client et explications
                col2.markdown("<p class='text-font'>Risque √©lev√© de d√©faillance. "
                              "<br>Proposition de classement du client: <span "
                              "class='text-font_red'> <strong>D√©faillant</strong> </span> <br>Demande de pr√™t <span "
                              "class='text-font_red'> <strong>Refus√©e</strong> </span>.<br><br>La demande de pr√™t n¬∞ "
                              "{id} a une probabilit√© de {prob}% d'√™tre d√©faillante. Le seuil de classement en client "
                              "d√©faillant se situe √† 47%. <br><br>Ce seuil a √©t√© d√©fini pour que le mod√®le de "
                              "pr√©diction soit capable de d√©tecter efficacement les vrais positifs (clients "
                              "d√©faillants pr√©dits d√©faillants) mais sans trop augmenter les faux positifs (clients "
                              "non d√©faillants) pr√©dits d√©faillants.</p>".format(id=loan_ID,
                                                                                 prob=round(float(response) * 100, 2)),
                              unsafe_allow_html=True)

            # Si la probabilit√© de d√©faillance est inf√©rieure au seuil de 0.47, classement non d√©faillant
            else:

                # Jauge
                gauge = go.Figure(go.Indicator(mode="gauge+number+delta",
                                               value=float(response) * 100,
                                               domain={'x': [0, 1], 'y': [0, 1]},
                                               delta={'reference': 47, 'decreasing': {'color': "#116813"}},
                                               gauge={'axis': {'range': [None, 100]},
                                                      'bar': {'color': "#116813"},
                                                      'steps': [
                                                          {'range': [0, 40], 'color': "lightgrey"},
                                                          {'range': [40, 60], 'color': "gray"},
                                                          {'range': [60, 100], 'color': "dimgray"}],
                                                      'threshold': {
                                                          'line': {'color': "red", 'width': 4},
                                                          'thickness': 0.75,
                                                          'value': 47}}))
                gauge.update_layout(font={'size': 18})

                # Affichage jauge
                col1.markdown(
                    "<p class='text-font_title'><strong>Probabilit√© de faillite du client (%)</strong></p>",
                    unsafe_allow_html=True)
                col1.plotly_chart(gauge, use_container_width=True)

                # Classement du client et explications
                col2.markdown("<p class='text-font'>Risque faible de d√©faillance. "
                              "<br>Proposition de classement du client: <span class='text-font_green'> <strong>Non "
                              "d√©faillant</strong> </span> <br>Demande de pr√™t :<span class='text-font_green'> "
                              "<strong>Accept√©e</strong> </span>.<br><br>La demande de pr√™t n¬∞ {id} a une probabilit√© "
                              "de {prob}% d'√™tre d√©faillante. Le seuil de classement en client d√©faillant se situe √† "
                              "47%. <br><br>Ce seuil a √©t√© d√©fini pour que le mod√®le de pr√©diction soit capable de "
                              "d√©tecter efficacement les vrais positifs (clients d√©faillants pr√©dits d√©faillants) "
                              "mais sans trop augmenter les faux positifs (clients non d√©faillants) pr√©dits "
                              "d√©faillants.</p>".format(id=loan_ID, prob=round(float(response) * 100, 2)),
                              unsafe_allow_html=True)

            col2.markdown("<p class='text-font'> <em>‚ùó Attention, il s'agit d'une proposition de classement "
                          "automatique bas√©e sur le risque de d√©faillance du client mais qui n'exclut en rien l'√©tude "
                          "attentive du dossier par le conseiller client√®le</em>.</p>",
                          unsafe_allow_html=True)

            st.divider()

            # --------------------------------------------------------------------------------
            # ------------------------- Features importance globales--------------------------
            # --------------------------------------------------------------------------------

            st.write("### Compr√©hension du mod√®le")

            st.markdown("<p class='text-font'>Visualiser l'importance des caract√©ristiques permet de mieux comprendre "
                        "quelles sont les <strong>features en entr√©e du mod√®le qui ont le plus d'utilit√© dans la "
                        "pr√©diction de la variable cible. </strong>"
                        "Dans un mod√®le de pr√©diction, l'importance de features permet d'avoir une meilleure "
                        "compr√©hension des donn√©es et du mod√®le et offre une base pour la r√©duction de "
                        "dimension, permettant la s√©lection de caract√©ristiques qui peuvent am√©liorer le "
                        "mod√®le.</p>",
                        unsafe_allow_html=True)

            # Appel √† l'API pour obtenir les features importance globales
            res = requests.get(host + f"/get_feature_importance/")
            response = res.json()
            df_credit_score_model = pd.read_json(response, orient='index')

            fig = plt.figure(figsize=(15, 12))
            plt.title('Variables du mod√®le et leur importance', fontsize=18)
            plt.xticks(rotation=45, ha='right')
            sns.barplot(data=df_credit_score_model, x='Score', y='Features', palette='rocket')

            # Affichage barplot
            st.pyplot(fig, clear_figure=True)

            st.divider()

            # --------------------------------------------------------------------------------
            # ------------------------ Features importance locales ---------------------------
            # --------------------------------------------------------------------------------

            st.write("### Compr√©hension du score de l'ID s√©lectionn√©")

            # Dataframe pour shap (ordre des features correspond √† l'ordre donn√© en entr√©e du mod√®le)
            df_shap = df[['CREDIT_DURATION', 'EXT_SOURCE_2', 'INSTAL_DAYS_PAST_DUE_MEAN',
                          'PAYMENT_RATE', 'POS_CNT_INSTALMENT_FUTURE_MEAN', 'CREDIT_GOODS_PERC',
                          'AGE', 'POS_NB_CREDIT', 'BURO_CREDIT_ACTIVE_Active_SUM', 'BURO_AMT_CREDIT_SUM_DEBT_MEAN',
                          'YEARS_EMPLOYED', 'YEARS_ID_PUBLISH', 'INSTAL_PAYMENT_DIFF_MEAN', 'BURO_AMT_CREDIT_SUM_MEAN',
                          'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'BURO_YEARS_CREDIT_ENDDATE_MEAN', 'AMT_CREDIT',
                          'YEARS_LAST_PHONE_CHANGE', 'POS_MONTHS_BALANCE_MEAN', 'INSTAL_DAYS_BEFORE_DUE_MEAN',
                          'BURO_AMT_CREDIT_SUM_DEBT_SUM', 'CODE_GENDER', 'PREV_YEARS_DECISION_MEAN',
                          'REGION_POPULATION_RELATIVE', 'DEBT_RATIO', 'BURO_AMT_CREDIT_SUM_SUM',
                          'BURO_YEARS_CREDIT_ENDDATE_MAX', 'NAME_EDUCATION_TYPE_Lower Secondary & Secondary',
                          'PREV_PAYMENT_RATE_MEAN']]

            # Chargement du scaler et du mod√®le LightGBM
            scaler = load(open('credit_score_model_scaler.sav', 'rb'))
            credit_score_model = load(open('credit_score_model_SHAP.sav', 'rb'))

            # Standardisation des donn√©es
            scaled_df_shap = scaler.transform(df_shap)

            # S√©lection de l'index de la ligne du df correspondant au pr√™t s√©lectionn√©
            subsampled_scaled_df_shap = scaled_df_shap[idx].reshape(1, -1)

            # Cr√©ation de l'explainer
            explainer = shap.TreeExplainer(credit_score_model)

            # Calcul des shap_values de la ligne s√©lectionn√©e
            shap_values = explainer.shap_values(subsampled_scaled_df_shap)

            # D√©cision plot
            # https://shap-lrjball.readthedocs.io/en/latest/generated/shap.decision_plot.html
            fig1 = plt.figure()
            plt.title("Chemin suivi pour l'obtention du score", fontsize=18)
            st_shap(shap.decision_plot(base_value=explainer.expected_value[1],
                                       shap_values=shap_values[1],
                                       features=subsampled_scaled_df_shap,
                                       feature_names=df_shap.columns.tolist(),
                                       link='logit',
                                       feature_display_range=slice(-1, -31, -1)),
                    width=1200,
                    height=800)

            expander = st.expander("Interpr√©tation du decision plot")
            expander.markdown("<p class='text-font'>Le graphique ci-dessus est appel√© un decision plot. Il permet de "
                              "visualiser <strong>comment un mod√®le complexe arrive √† sa pr√©diction.</strong> "
                              "<br>L'axe des x repr√©sente la pr√©diction et l'axe y les caract√©ristiques par ordre "
                              "d√©croissant d'importance. En se d√©pla√ßant du bas vers le haut, les valeurs de "
                              "chaque caract√©ristique sont ajout√©es √† la valeur de base du mod√®le. Cela montre"
                              " comment chaque caract√©ristiques contribue √† la pr√©diction.<br><br>Ce diagramme a "
                              "l'avantage de montrer clairement un grand nombre de caract√©ristiques (les 30 utilis√©es "
                              "par le mod√®le) et de visualiser l'effet cumulatif des int√©ractions.</p>",
                              unsafe_allow_html=True)

            # Force plot
            # https: // shap.readthedocs.io / en / latest / generated / shap.plots.force.html
            st_shap(shap.force_plot(base_value=explainer.expected_value[1],
                                    shap_values=shap_values[1],
                                    features=subsampled_scaled_df_shap,
                                    feature_names=df_shap.columns,
                                    out_names='Prob D√©faillance',
                                    link='logit'))  # pour avoir les probabilit√©s

            expander = st.expander("Interpr√©tation du force plot")
            expander.markdown("<p class='text-font'>Le graphique ci-dessus est appel√© un force plot. Il montre les "
                              "caract√©ristiques qui contribuent √† pousser la pr√©diction √† partir de la valeur de "
                              "base (sortie moyenne du mod√®le sur l'ensemble des donn√©es d'entrainement). <br>Les "
                              "caract√©ristiques qui poussent la pr√©diction vers le haut sont indiqu√©es en rouge / √† "
                              "gauche. Les caract√©ristiques qui la font baisser apparaissent en bleu / √† droite.</p>",
                              unsafe_allow_html=True)

except URLError as e:
    st.error(
        """
        **This demo requires internet access.**
        Connection error: %s
    """
        % e.reason
    )
